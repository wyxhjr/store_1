diff --git a/python/dglke/dataloader/sampler.py b/python/dglke/dataloader/sampler.py
index 2e46bfd..4b3cba9 100644
--- a/python/dglke/dataloader/sampler.py
+++ b/python/dglke/dataloader/sampler.py
@@ -418,6 +418,7 @@ class TrainDataset(object):
                            exclude_positive=exclude_positive,
                            return_false_neg=False)
 
+# class ChunkNegEdgeSubgraph(dgl.DGLGraph):
 class ChunkNegEdgeSubgraph(dgl._deprecate.graph.DGLGraph):
     """Wrapper for negative graph
 
diff --git a/python/dglke/train_pytorch.py b/python/dglke/train_pytorch.py
index dbe60c1..1e32b09 100644
--- a/python/dglke/train_pytorch.py
+++ b/python/dglke/train_pytorch.py
@@ -166,10 +166,10 @@ def train(args, model, train_sampler, valid_samplers=None, rank=0, rel_parts=Non
                     v = sum(l[k] for l in logs) / len(logs)
                     print('[proc {}][Train]({}/{}) average {}: {}'.format(rank, (step + 1), args.max_step, k, v))
                 logs = []
-                print('[proc {}][Train] {} steps take {:.3f} seconds'.format(rank, args.log_interval,
-                                                                time.time() - start))
-                print('[proc {}]sample: {:.3f}, forward: {:.3f}, backward: {:.3f}, update: {:.3f}'.format(
-                    rank, sample_time, forward_time, backward_time, update_time))
+
+                print('[proc {}] {} steps, total: {:.3f}, sample: {:.3f}, forward: {:.3f}, backward: {:.3f}, update: {:.3f}'.format(
+                    rank, (step + 1), time.time() - start,  sample_time, forward_time, backward_time, update_time), flush=True)
+
                 sample_time = 0
                 update_time = 0
                 forward_time = 0
@@ -190,7 +190,7 @@ def train(args, model, train_sampler, valid_samplers=None, rank=0, rel_parts=Non
             if barrier is not None:
                 barrier.wait()
 
-    print('proc {} takes {:.3f} seconds'.format(rank, time.time() - train_start))
+    print('proc {} takes {:.3f} seconds'.format(rank, time.time() - train_start), flush=True)
     if args.async_update:
         model.finish_async_update()
     if args.strict_rel_part or args.soft_rel_part:
diff --git a/python/dglke/utils.py b/python/dglke/utils.py
index 8a86e9e..b5c7b13 100644
--- a/python/dglke/utils.py
+++ b/python/dglke/utils.py
@@ -205,7 +205,7 @@ class CommonArgParser(argparse.ArgumentParser):
                                    'RESCAL', 'DistMult', 'ComplEx', 'RotatE',
                                    'SimplE'],
                           help='The models provided by DGL-KE.')
-        self.add_argument('--data_path', type=str, default='data',
+        self.add_argument('--data_path', type=str, default='/home/xieminhui/dgl-data',
                           help='The path of the directory where DGL-KE loads knowledge graph data.')
         self.add_argument('--dataset', type=str, default='FB15k',
                           help='The name of the builtin knowledge graph. Currently, the builtin knowledge '\
@@ -224,9 +224,10 @@ class CommonArgParser(argparse.ArgumentParser):
                                   'In both cases, valid_file and test_file are optional.')
         self.add_argument('--delimiter', type=str, default='\t',
                           help='Delimiter used in data files. Note all files should use the same delimiter.')
-        self.add_argument('--save_path', type=str, default='ckpts',
+        self.add_argument('--save_path', type=str, default='/tmp/ckpts',
                           help='the path of the directory where models and logs are saved.')
-        self.add_argument('--no_save_emb', action='store_true',
+        # self.add_argument('--no_save_emb', action='store_true',
+        self.add_argument('--no_save_emb', type=bool, default=False,
                           help='Disable saving the embeddings under save_path.')
         self.add_argument('--max_step', type=int, default=80000,
                           help='The maximal number of steps to train the model. '\
@@ -255,7 +256,8 @@ class CommonArgParser(argparse.ArgumentParser):
         self.add_argument('--eval_interval', type=int, default=10000,
                           help='Print evaluation results on the validation dataset every x steps '\
                                   'if validation is turned on')
-        self.add_argument('--test', action='store_true',
+        # self.add_argument('--test', action='store_true',
+        self.add_argument('--test', type=bool, default=False,
                           help='Evaluate the model on the test set after the model is trained.')
         self.add_argument('--num_proc', type=int, default=1,
                           help='The number of processes to train the model in parallel. '\
